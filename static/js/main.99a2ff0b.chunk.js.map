{"version":3,"sources":["Slot.js","Utils.js","Circle.js","Button.js","App.js","serviceWorker.js","index.js"],"names":["Slot","value","onClick","selected","styles","piece","height","width","backgroundColor","padding","boxSizing","circle","borderRadius","border","boxShadow","style","arraysEqual","a","b","length","i","scoreBoard","boardToScore","checkBoard","score","x","y","z","w","board","won","Circle","display","Button","title","container","color","isRed","cursor","App","initialize","tmpBoard","push","j","generateEmptyBoard","setBoard","setTurn","setRecentMove","useState","turn","recentMove","waiting","setWaiting","difficulty","setDifficulty","waitingRef","useRef","useEffect","console","log","copy","deepCopy","c","minimax","givenSituation","depth","player","boardScore","Math","abs","move","endScore","moveDone","executedMove","executeMove","m","mObj","getRow","current","boardStyle","flexWrap","buttonHolder","header","justifyContent","alignItems","difficultyHolder","column","prevBoard","testTurn","row","isNaN","tempBoard","rowToPlace","arr","JSON","parse","stringify","map","element","index","rowIndex","currentPiece","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.99a2ff0b.chunk.js","sourcesContent":["import React from \"react\";\n\n//0=empty 1=red 2=black\nexport function Slot({ value, onClick, selected }) {\n  const styles = {\n    piece: {\n      height: 80,\n      width: `${100 / 7}%`,\n      backgroundColor: \"yellow\",\n      padding: 12,\n      boxSizing: \"border-box\",\n    },\n    circle: {\n      height: 60,\n      width: 60,\n      borderRadius: 40,\n      border: `3px solid ${selected ? \"#00FF00\" : \"yellow\"}`,\n      boxShadow: 'inset 1px 2px 3px #000000'\n    },\n  };\n\n  return (\n    <div\n      style={{\n        ...styles.piece,\n      }}\n      onClick={onClick}\n    >\n      <div\n        style={{\n          ...styles.circle,\n\n          backgroundColor: !value\n            ? \"#ffffff\"\n            : value === 1\n            ? \"#ff0000\"\n            : \"#000000\",\n        }}\n      ></div>\n    </div>\n  );\n}\n","export function arraysEqual(a, b) {\n  if (a === b) return true;\n  if (a == null || b == null) return false;\n  if (a.length !== b.length) return false;\n\n  // If you don't care about the order of the elements inside\n  // the array, you should sort both arrays here.\n  // Please note that calling sort on an array will modify that array.\n  // you might want to clone your array first.\n\n  for (var i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\n\nexport function scoreBoard(boardToScore) {\n  if (checkBoard(boardToScore) === 1) {\n    return 10000;\n  }\n  if (checkBoard(boardToScore) === 2) {\n    return -10000;\n  }\n  let score = 0;\n  for (let x = 0; x < boardToScore.length; x++) {\n    for (let y = 0; y < boardToScore[0].length; y++) {\n      for (let z = -1; z < 2; z++) {\n        for (let w = -1; w < 2; w++) {\n          if (\n            boardToScore[x]+1 &&\n            boardToScore[x][y]+1 &&\n            boardToScore[x + w]+1 &&\n            boardToScore[x + w][y + z]+1 &&\n            boardToScore[x + 2 * w] +1&&\n            boardToScore[x + 2 * w][y + 2 * z]+1 &&\n            boardToScore[x + 3 * w]+1&&\n            boardToScore[x + 3 * w][y + 3 * z]+1\n\n            &&\n            arraysEqual(\n              [\n                boardToScore[x][y],\n                boardToScore[x + w][y + z],\n                boardToScore[x + 2 * w][y + 2 * z],\n                boardToScore[x + 3 * w][y + 3 * z],\n              ],\n              [0, 1, 1, 1]\n            )\n          ) {\n            score++\n          }\n          if (boardToScore[x]+1 &&\n            boardToScore[x][y] +1&&\n            boardToScore[x + w]+1 &&\n            boardToScore[x + w][y + z]+1 &&\n            boardToScore[x + 2 * w]+1&&\n            boardToScore[x + 2 * w][y + 2 * z]+1 &&\n            boardToScore[x + 3 * w]+1&&\n            boardToScore[x + 3 * w][y + 3 * z]+1\n\n            &&\n            arraysEqual(\n              [\n                boardToScore[x][y],\n                boardToScore[x + w][y + z],\n                boardToScore[x + 2 * w][y + 2 * z],\n                boardToScore[x + 3 * w][y + 3 * z],\n              ],\n              [0, 2, 2, 2]\n            )\n        )\n          {\n            score--\n          }\n\n        }\n      }\n    }\n  }\n  return score\n}\n\nexport function checkBoard(board) {\n  let won = 0;\n  for (let x = 0; x < board.length; x++) {\n    for (let y = 0; y < board[0].length; y++) {\n      for (let z = 1; z < 3; z++) {\n        if (\n          x > 2 &&\n          y < board[0].length - 3 &&\n          arraysEqual(\n            [\n              board[x][y],\n              board[x - 1][y + 1],\n              board[x - 2][y + 2],\n              board[x - 3][y + 3],\n            ],\n            [z, z, z, z]\n          )\n        ) {\n          won = z;\n        }\n\n        if (\n          y < board[0].length - 3 &&\n          arraysEqual(\n            [board[x][y], board[x][y + 1], board[x][y + 2], board[x][y + 3]],\n            [z, z, z, z]\n          )\n        ) {\n          won = z;\n        }\n\n        if (\n          x > 2 &&\n          arraysEqual(\n            [board[x][y], board[x - 1][y], board[x - 2][y], board[x - 3][y]],\n            [z, z, z, z]\n          )\n        ) {\n          won = z;\n        }\n        if (\n          y < board[0].length - 3 &&\n          x < board.length - 3 &&\n          arraysEqual(\n            [\n              board[x][y],\n              board[x + 1][y + 1],\n              board[x + 2][y + 2],\n              board[x + 3][y + 3],\n            ],\n            [z, z, z, z]\n          )\n        ) {\n          won = z;\n        }\n      }\n    }\n  }\n  return won;\n}\n","import React from \"react\";\n\nexport function Circle({ value }) {\n  const styles = {\n    circle: {\n      height: 20,\n      width: 20,\n      borderRadius: 40,\n      backgroundColor: value === 1 ? \"#FF0000\" : \"#000000\",\n      display: 'inline-block'\n    },\n  };\n  return <div style={styles.circle} />;\n}\n","import React from \"react\";\n\nexport function Button({title, onClick,isRed}) {\n  const styles = {\n    container:{\n      color: '#FFFFFF' ,\n      backgroundColor: isRed?'#FF0000':'#0000FF',\n      display: 'inline-block',\n      padding: 4 ,\n      cursor: 'pointer',\n      borderRadius:4\n    }\n  }\n  return <div style={styles.container} onClick={onClick}>{title}</div>;\n\n}","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport { Slot } from \"./Slot\";\nimport { checkBoard, scoreBoard } from \"./Utils\";\nimport { Circle } from \"./Circle\";\nimport { Button } from \"./Button\";\n\nfunction App() {\n  function generateEmptyBoard() {\n    let tmpBoard = [];\n    for (let i = 0; i < 6; i++) {\n      tmpBoard.push([]);\n      for (let j = 0; j < 7; j++) {\n        tmpBoard[i].push(0);\n      }\n    }\n    return tmpBoard;\n  }\n\n  function initialize() {\n    const tmpBoard = generateEmptyBoard();\n    setBoard(tmpBoard);\n    setTurn(1);\n    setRecentMove(null);\n  }\n\n  const [turn, setTurn] = useState(1);\n  const [board, setBoard] = useState([]);\n  const [recentMove, setRecentMove] = useState(null);\n  const [waiting, setWaiting] = useState(false);\n  const [difficulty, setDifficulty] = useState(1);\n  const waitingRef = useRef(false)\n  useEffect(() => initialize(), []);\n\n  useEffect(() => {\n    if (waiting && board) {\n      console.log('doing work')\n      const copy = deepCopy(board);\n      if (!checkBoard(board)) {\n        const c = nextMove(board, 2);\n        setBoard(executeMove(c, copy, 2));\n        setTurn(1);\n        setRecentMove([getRow(c, board), c]);\n      }\n      setWaiting(false);\n      waitingRef.current = false\n    }\n  }, [waiting]);\n\n  const styles = {\n    boardStyle: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      width: 648,\n    },\n    buttonHolder: {\n      padding: 4,\n    },\n    header: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      width: 648,\n    },\n    difficultyHolder: {\n      display: \"flex\",\n    },\n  };\n\n  function executeMove(column, prevBoard, testTurn) {\n    const row = getRow(column, prevBoard);\n    if (!isNaN(row)) {\n      let tempBoard = deepCopy(prevBoard);\n      tempBoard[getRow(column, prevBoard)][column] = testTurn;\n      return tempBoard;\n    }\n  }\n\n  function getRow(column, prevBoard) {\n    for (let rowToPlace = prevBoard.length - 1; rowToPlace >= 0; rowToPlace--) {\n      if (prevBoard[rowToPlace][column] === 0) {\n        console.log(rowToPlace, column);\n        return rowToPlace;\n      }\n    }\n  }\n\n  function deepCopy(arr) {\n    return JSON.parse(JSON.stringify(arr));\n  }\n\n  function minimax(givenSituation, depth, player, a, b) {\n    if (givenSituation) {\n      const boardScore = scoreBoard(givenSituation);\n      if (Math.abs(boardScore) < 10000) {\n        if (depth === 0) {\n          return { score: scoreBoard(givenSituation), move: null };\n        }\n        let endScore = 0;\n        if (player === 2) {\n          endScore = b;\n          let moveDone = 0;\n          for (let move = 0; move < 7; move++) {\n            const executedMove = executeMove(move, givenSituation, 2);\n            if (executedMove) {\n              console.log(\"i did run\");\n              let m = minimax(executedMove, depth - 1, 1, a, b).score;\n              if (m < endScore) {\n                endScore = m;\n                b = endScore;\n                moveDone = move;\n              }\n              if (a >= b) {\n                return { score: b, move: move };\n              }\n            }\n          }\n          return { score: endScore, move: moveDone };\n        }\n        if (player === 1) {\n          endScore = a;\n          let move = 0;\n          let moveDone = 0;\n          for (move = 0; move < 7; move++) {\n            const executedMove = executeMove(move, givenSituation, player);\n            if (executedMove) {\n              let mObj = minimax(\n                executedMove,\n                depth - 1,\n                (player % 2) + 1,\n                a,\n                b\n              );\n              if (!mObj) {\n                console.log();\n              }\n              const m = mObj.score;\n              if (m > endScore) {\n                endScore = m;\n                a = endScore;\n                moveDone = move;\n              }\n              if (a >= b) {\n                return { score: a, move: move };\n              }\n            }\n          }\n          return { score: endScore, move: moveDone };\n        }\n      } else {\n        if (boardScore === 10000) {\n          return { score: 10000, move: null };\n        }\n        if (boardScore === -10000) {\n          return { score: -10000, move: null };\n        }\n      }\n    }\n  }\n\n  function nextMove(currentBoard, player) {\n    return minimax(currentBoard, difficulty + 3, player, -10000, 10000).move;\n  }\n\n  //console.log(minimax([[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[2,0,1,1,0,0,0]],6,2,-10000,10000))\n  const won = board ? checkBoard(board) : 0;\n\n  return (\n    <div>\n      <div style={styles.header}>\n        <div style={styles.difficultyHolder}>\n          {[\"Easy\", \"Medium\", \"Hard\"].map((element, index) => (\n            <div style={styles.buttonHolder}>\n              <Button\n                title={element}\n                onClick={() => setDifficulty(index)}\n                isRed={index === difficulty}\n              />\n            </div>\n          ))}\n        </div>\n        <div>\n          {waiting ? (\n            <div>Computer is thinking</div>\n          ) : (\n            <div>\n              <Circle value={turn} /> 's turn\n            </div>\n          )}\n        </div>\n        <div>\n          <Button\n            title={\"Restart\"}\n            onClick={() => {\n              initialize();\n            }}\n          />\n        </div>\n      </div>\n\n      {won ? (\n        <div> player {won === 1 ? \"red\" : \"black\"} has won the game </div>\n      ) : null}\n      <div style={styles.boardStyle}>\n        {board.map((row, rowIndex) =>\n          row.map((currentPiece, index) => (\n            <Slot\n              value={currentPiece}\n              onClick={() => {\n                const rowToPlace = getRow(index, board);\n                console.log('waiting',waitingRef.current)\n                if (!won && !waitingRef.current) {\n                  waitingRef.current = true\n\n                  let tempBoard = deepCopy(board);\n                  tempBoard[rowToPlace][index] = turn;\n                  setBoard(tempBoard);\n                  setTurn(turn === 1 ? 2 : 1);\n                  setRecentMove([rowToPlace, index]);\n                  setWaiting(true);\n                }\n              }}\n              selected={\n                recentMove &&\n                recentMove[0] === rowIndex &&\n                recentMove[1] === index\n              }\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}